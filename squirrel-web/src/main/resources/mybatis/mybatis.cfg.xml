<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<settings>
		<!-- 开启二级缓存 -->
		<setting name="cacheEnabled" value="false" />
		<!-- 延迟加载的全局开关,当开启时!所有关联对象都会延迟加载! -->
		<setting name="lazyLoadingEnabled" value="false" />
		<!-- 当开启时,任何方法的调用都会加载该对象的所有属性!否则,每个属性会按需加载! -->
		<setting name="aggressiveLazyLoading" value="false" />
		<!-- 是否允许单一语句返回多结果集(需要兼容驱动) -->
		<setting name="multipleResultSetsEnabled" value="false" />
		<!-- 使用列标签代替列名! -->
		<setting name="useColumnLabel" value="true" />
		<!-- 允许 JDBC 支持自动生成主键,需要驱动兼容! -->
		<setting name="useGeneratedKeys" value="false" />
		<!-- 指定 MyBatis 应如何自动映射列到字段或属性! -->
		<!-- NONE:表示取消自动映射 -->
		<!-- PARTIAL:只会自动映射没有定义嵌套结果集映射的结果集 -->
		<!-- FULL:会自动映射任意复杂的结果集(无论是否嵌套) -->
		<setting name="autoMappingBehavior" value="NONE" />
		<!-- 指定发现自动映射目标未知列(或者未知属性类型)的行为! -->
		<!--NONE: 不做任何反应 -->
		<!-- WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN) -->
		<!-- FAILING: 映射失败 (抛出 SqlSessionException) -->
		<setting name="autoMappingUnknownColumnBehavior" value="FAILING" />
		<!-- 配置默认的执行器! -->
		<!-- SIMPLE 就是普通的执行器 -->
		<!-- REUSE 执行器会重用预处理语句(prepared statements) -->
		<!-- BATCH 执行器将重用语句并执行批量更新 -->
		<setting name="defaultExecutorType" value="SIMPLE" />
		<!-- 设置超时时间,它决定驱动等待数据库响应的秒数! -->
		<setting name="defaultStatementTimeout" value="60" />
		<!-- 为驱动的结果集获取数量(fetchSize)设置一个提示值!此参数只可以在查询设置中被覆盖! -->
		<setting name="defaultFetchSize" value="128" />
		<!-- 允许在嵌套语句中使用分页(RowBounds)!如果允许使用则设置为false -->
		<setting name="safeRowBoundsEnabled" value="true" />
		<!-- 允许在嵌套语句中使用分页(ResultHandler)!如果允许使用则设置为false -->
		<setting name="safeResultHandlerEnabled" value="true" />
		<!-- 是否开启自动驼峰命名规则(camel case)映射!即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射! -->
		<setting name="mapUnderscoreToCamelCase" value="false" />
		<!-- MyBatis 利用本地缓存机制(Local Cache)防止循环引用(circular references)和加速重复嵌套查询! -->
		<!-- 默认值为 SESSION,这种情况下会缓存一个会话中执行的所有查询! -->
		<!--若设置值为 STATEMENT,本地会话仅用在语句执行上,对相同 SqlSession 的不同调用将不会共享数据! -->
		<setting name="localCacheScope" value="SESSION" />
		<!-- 当没有为参数提供特定的 JDBC 类型时,为空值指定 JDBC 类型! 某些驱动需要指定列的 JDBC 类型! -->
		<!--多数情况直接用一般类型即可,比如 NULL、VARCHAR或 OTHER! -->
		<setting name="jdbcTypeForNull" value="OTHER" />
		<!-- 指定哪个对象的方法触发一次延迟加载! -->
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
		<!-- 指定动态 SQL 生成的默认语言 -->
		<setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver" />
		<!-- Specifies the TypeHandler used by default for Enum -->
		<setting name="defaultEnumTypeHandler" value="org.apache.ibatis.type.EnumTypeHandler" />
		<!-- 指定当结果集中值为 null 的时候是否调用映射对象的 setter(map 对象时为 put)方法! -->
		<!--这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的! -->
		<!--注意基本类型(int、boolean等)是不能设置成 null的! -->
		<setting name="callSettersOnNulls" value="false" />
		<!-- 当返回行的所有列都是空时,MyBatis默认返回null! -->
		<!--当开启这个设置时,MyBatis会返回一个空实例! -->
		<!-- 请注意,它也适用于嵌套的结果集 (i.e. collectioin and association) -->
		<setting name="returnInstanceForEmptyRow" value="false" />
		<!-- 指定 MyBatis 增加到日志名称的前缀! -->
		<!-- <setting name="logPrefix" value="" /> -->
		<!-- 指定 MyBatis 所用日志的具体实现,未指定时将自动查找! -->
		<setting name="logImpl" value="SLF4J" />
		<!-- 指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具! -->
		<setting name="proxyFactory" value="JAVASSIST" />
		<!-- 指定VFS的实现 -->
		<!-- <setting name="vfsImpl" value="" /> -->
		<!-- 允许使用方法签名中的名称作为语句参数名称 -->
		<!--为了使用该特性,你的工程必须采用Java 8编译,并且加上-parameters选项! -->
		<setting name="useActualParamName" value="true" />
		<!-- 指定一个提供Configuration实例的类! -->
		<!-- 这个被返回的Configuration实例是用来加载被反序列化对象的懒加载属性值! -->
		<!-- 这个类必须包含一个签名方法static Configuration getConfiguration()! -->
		<!-- <setting name="configurationFactory" value="" /> -->
	</settings>
	<plugins>
		<plugin interceptor="com.squirrel.base.interceptor.PagedQueryInterceptor">
			<property name="DB_SWITCH" value="ORACLE" />
		</plugin>
	</plugins>
</configuration>